plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.android.extensions'
    id 'com.google.gms.google-services'
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.testkotlin"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    androidExtensions {
        experimental = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.config = getProps('../config/release.properties')
            ext.config.each { p ->
                if(p.key == "APP_NAME"){
                    resValue "string","app_name", p.value
                }
                else if(p.key=="APPLICATION_SUFFIX_ID"){
                    applicationIdSuffix p.value
                }else
                    buildConfigField 'String', p.key, p.value
            }

        }
        staging {
            initWith debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.config = getProps('../config/staging.properties')
            ext.config.each { p ->
                if (p.key == "APP_NAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_SUFFIX_ID") {
                    applicationIdSuffix p.value
                } else {
                    buildConfigField 'String', p.key, p.value
                }
            }
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.config = getProps('../config/debug.properties')
            ext.config.each { p ->
                if (p.key == "APP_NAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_SUFFIX_ID") {
                    applicationIdSuffix p.value
                } else
                    buildConfigField 'String', p.key, p.value
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    implementation platform('com.google.firebase:firebase-bom:26.8.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation 'com.android.volley:volley:1.2.0'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


def getProps(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(path)))
    return props
}